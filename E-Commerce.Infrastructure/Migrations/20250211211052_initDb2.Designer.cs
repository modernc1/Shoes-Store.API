// <auto-generated />
using System;
using E_Commerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250211211052_initDb2")]
    partial class initDb2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Domain.Models.Cart.CheckoutHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CheckoutHistory");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Cart.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = "c604226c-9b6b-4465-aa75-5ecefba8d840",
                            Name = "CreditCard"
                        },
                        new
                        {
                            Id = "c604226c-9b6b-4465-aa75-5ecefba8d835",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("475208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("575208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("675208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#808080",
                            Name = "Gray"
                        },
                        new
                        {
                            Id = new Guid("775208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#D3D3D3",
                            Name = "Light Gray"
                        },
                        new
                        {
                            Id = new Guid("875208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#333333",
                            Name = "Charcoal"
                        },
                        new
                        {
                            Id = new Guid("975208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#001F3F",
                            Name = "Navy Blue"
                        },
                        new
                        {
                            Id = new Guid("175208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#4169E1",
                            Name = "Royal Blue"
                        },
                        new
                        {
                            Id = new Guid("275208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#87CEEB",
                            Name = "Sky Blue"
                        },
                        new
                        {
                            Id = new Guid("375208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = new Guid("315208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#800000",
                            Name = "Dark Red (Maroon)"
                        },
                        new
                        {
                            Id = new Guid("325208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#8B0000",
                            Name = "Burgundy"
                        },
                        new
                        {
                            Id = new Guid("335208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#654321",
                            Name = "Brown"
                        },
                        new
                        {
                            Id = new Guid("345208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#D2B48C",
                            Name = "Tan"
                        },
                        new
                        {
                            Id = new Guid("355208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#F5F5DC",
                            Name = "Beige"
                        },
                        new
                        {
                            Id = new Guid("365208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#808000",
                            Name = "Olive Green"
                        },
                        new
                        {
                            Id = new Guid("371208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#4B5320",
                            Name = "Military Green"
                        },
                        new
                        {
                            Id = new Guid("372208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#228B22",
                            Name = "Forest Green"
                        },
                        new
                        {
                            Id = new Guid("373208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FFD700",
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = new Guid("374208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FF4500",
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("376208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#800080",
                            Name = "Purple"
                        },
                        new
                        {
                            Id = new Guid("377208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#9400D3",
                            Name = "Violet"
                        },
                        new
                        {
                            Id = new Guid("378208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FFC0CB",
                            Name = "Pink"
                        },
                        new
                        {
                            Id = new Guid("379208bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#B76E79",
                            Name = "Rose Gold"
                        },
                        new
                        {
                            Id = new Guid("375108bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#FFD700",
                            Name = "Gold"
                        },
                        new
                        {
                            Id = new Guid("375808bf-d3fe-4029-a381-474ab0daa225"),
                            HexCode = "#C0C0C0",
                            Name = "Silver"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("546c234a-390b-467b-913c-c6153ba4f83a"),
                            Name = "Men"
                        },
                        new
                        {
                            Id = new Guid("c99a79ab-2a1e-40c9-a821-cfe627134acc"),
                            Name = "Women"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductsImages");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItem");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductVariation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SizeOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("SizeOptionId");

                    b.ToTable("ProductVariations");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.SizeOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SizeOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87d466c9-b472-4bf5-aa6a-36542dcd2168"),
                            Name = "38",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("67ff2632-eaca-4517-a003-e0d350180830"),
                            Name = "39",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("91428799-f976-41c4-ba90-f37ef89c32a2"),
                            Name = "40",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("75c8d74b-a14d-4fcc-a6d2-c45f88fab43f"),
                            Name = "41",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("e2748efb-9886-49a6-bcf1-797f68e67f17"),
                            Name = "42",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("28457f8e-7f80-488a-be4a-55b105425f37"),
                            Name = "43",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("ca20f2fa-a6b8-440e-bbcc-efadf412a42d"),
                            Name = "44",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("4fce50b1-bb79-4bce-8da0-4970f8aa0760"),
                            Name = "45",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("f392c6d7-94ec-4705-9669-530823e5de24"),
                            Name = "46",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("30933c30-bca4-4683-945a-0e482a8c4fb8"),
                            Name = "47",
                            SortOrder = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0a1bdf5-1221-4050-82a6-9420d9e71964",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4a16c373-f59c-4ac6-aa64-51c8c87137eb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Cart.CheckoutHistory", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Category", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.ProductGender", "Gender")
                        .WithMany("Categories")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductImages", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.ProductItem", "ProductItem")
                        .WithMany("Images")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductItem", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Color", "Color")
                        .WithMany("ProductItems")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Models.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductVariation", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.ProductItem", "ProductItem")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Models.SizeOption", "SizeOption")
                        .WithMany("ProductVariations")
                        .HasForeignKey("SizeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");

                    b.Navigation("SizeOption");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Color", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductGender", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.ProductItem", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductVariations");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.SizeOption", b =>
                {
                    b.Navigation("ProductVariations");
                });
#pragma warning restore 612, 618
        }
    }
}
